dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv("50_Startups.csv")
dataset = read.csv("50_Startups.csv")
dataset = read.csv("50_Startups.csv")
source('C:/Users/snehc/Desktop/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression/multiple_linear_regression.R')
dataset = read.csv('50_Startups.csv')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
install.packages('e1071')
install.packages(ElemStatLearn)
setwd("C:/Users/snehc/Desktop/Machine Learning A-Z/Part 4 - Clustering/Section 24 - K-Means Clustering")
dataset = read.csv('Mall_Customers.csv')
X <- dataset[4:5]
dataset = read.csv('Mall_Customers.csv')
X = dataset[4:5]
#Using the elbow method to find optimal number of clusters
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X,i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Cluster of clients'), xlab = 'Number of clusters')
set.seed(123)
kmeans = kmeans(X, 5, iter.max = 300, nstart = 10)
set.seed(123)
kmeans = kmeans(X, 5, iter.max = 300, nstart = 10)
#Visualizing the clusters
library(cluster)
clusplot(X,
kmeans$cluster,
lines = 0,
shade =TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Cluster of clients'),
xlab = 'Annual Income',
ylab = 'Spending score')
setwd("C:/Users/snehc/Desktop/Machine Learning A-Z/Part 4 - Clustering/Section 25 - Hierarchical Clustering")
dataset = read.csv('Mall_Customers.csv')
X = dataset[4:5]
#Using the dendrogram to find optimal number of clusters
dendrogram = hclust(dist(X, method='euclidean'), method = 'ward.D')
plot(dendrogram,
main = paste('Dendrogram'),
xlab = 'Customers',
ylab = 'Euclidean Distances')
hc = hclust(dist(X, method='euclidean'), method = 'ward.D')
y_hc = cutree(hc, 5)
y_hc
library(cluster)
clusplot(X,
y_hc,
lines = 0,
shade =TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Cluster of clients'),
xlab = 'Annual Income',
ylab = 'Spending score')
clusplot(X,
y_hc,
lines = 0,
shade =TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Cluster of customers'),
xlab = 'Annual Income',
ylab = 'Spending score')
setwd("C:/Users/snehc/Desktop/Machine Learning A-Z/Part 5 - Association Rule Learning/Section 28 - Apriori")
dataset = read.csv('Market_Basket_Optimisation.csv')
dataset = read.csv('Market_Basket_Optimisation.csv')
View(dataset)
View(dataset)
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
View(dataset)
View(dataset)
install.packages('arules')
library(arules)
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
dataset = read.transactions(file='Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 100)
rules = apriori(data = dataset,
parameter = list(support = 0.003, confidence = 0.8))
rules = apriori(data = dataset,
parameter = list(support = 0.003, confidence = 0.4))
rules
rules[1:10]
inspect(sort(rules, by = 'lift')[1:10])
parameter = list(support = 0.003, confidence = 0.2))
rules = apriori(data = dataset,
parameter = list(support = 0.003, confidence = 0.2))
inspect(sort(rules, by = 'lift')[1:10])
#Training apriori on the dataset
rules = apriori(data = dataset,
parameter = list(support = 0.004, confidence = 0.2))
#Visualizing the results
inspect(sort(rules, by = 'lift')[1:10])
#Training apriori on the dataset
rules = apriori(data = dataset,
parameter = list(support = 0.004, confidence = 0.4))
#Visualizing the results
inspect(sort(rules, by = 'lift')[1:10])
setwd("C:/Users/snehc/Desktop/Machine Learning A-Z/Part 5 - Association Rule Learning/Section 29 - Eclat")
#Eclat
#Data Preprocessing
library(arules)
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
dataset = read.transactions(file='Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 100)
#Training apriori on the dataset
rules = eclat(data = dataset,
parameter = list(support = 0.004))
#Visualizing the results
inspect(sort(rules, by = 'lift')[1:10])
rules = eclat(data = dataset,
parameter = list(support = 0.004, minlen = 2))
rules = eclat(data = dataset,
parameter = list(support = 0.004, minlen = 2))
#Visualizing the results
inspect(sort(rules, by = 'support')[1:10])
rules = eclat(data = dataset,
parameter = list(support = 0.003, minlen = 2))
#Visualizing the results
inspect(sort(rules, by = 'support')[1:10])
