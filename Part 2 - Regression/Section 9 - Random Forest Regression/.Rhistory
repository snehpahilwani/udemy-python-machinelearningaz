dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
dataset = read.csv("50_Startups.csv")
dataset = read.csv("50_Startups.csv")
dataset = read.csv("50_Startups.csv")
source('C:/Users/snehc/Desktop/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression/multiple_linear_regression.R')
dataset = read.csv('50_Startups.csv')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
install.packages('e1071')
install.packages('rpart', repos='http://archive.linux.duke.edu/cran/')
setwd("C:/Users/snehc/Desktop/Machine Learning A-Z/Part 2 - Regression/Section 8 - Decision Tree Regression")
#Decision Tree Regression
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
#Splitting data into training and test set
#install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$Salary, SplitRatio = 2/3)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
#Feature scaling
#training_set[, 2:3] = scale(training_set[, 2:3])
#test_set[, 2:3] = scale(test_set[, 2:3])
#Fitting Regression Model to dataset
#Create regressor here
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset)
View(dataset)
View(dataset)
y_pred = predict(poly_reg, data.frame(Level = 6.5))
#Visualizing poly reg (high resolution)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y =  predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff(Regression Model)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
#Predicting a result with Poly Regression
y_pred = predict(poly_reg, data.frame(Level = 6.5))
#Visualizing poly reg (high resolution)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y =  predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff(Regression Model)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
setwd("C:/Users/snehc/Desktop/Machine Learning A-Z/Part 2 - Regression/Section 9 - Random Forest Regression")
install.packages('randomForest', repos='http://archive.linux.duke.edu/cran/')
#Random Forest regression
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
#Fitting Random Forest Regression Model to dataset
library(randomForest)
#With brackets, give data frames, $ gives a vector (according to arguments)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 300)
#Predicting a result with Random Forest Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
#Visualizing Random Forest reg (high resolution)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y =  predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff(Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
#Random Forest regression
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
#Fitting Random Forest Regression Model to dataset
library(randomForest)
#With brackets, give data frames, $ gives a vector (according to arguments)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 350)
#Predicting a result with Random Forest Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
#Visualizing Random Forest reg (high resolution)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y =  predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff(Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
#Random Forest regression
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
#Fitting Random Forest Regression Model to dataset
library(randomForest)
#With brackets, give data frames, $ gives a vector (according to arguments)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 350)
#Predicting a result with Random Forest Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
#Visualizing Random Forest reg (high resolution)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y =  predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff(Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
#Random Forest regression
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
#Fitting Random Forest Regression Model to dataset
library(randomForest)
#With brackets, give data frames, $ gives a vector (according to arguments)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 400)
#Predicting a result with Random Forest Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
#Visualizing Random Forest reg (high resolution)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y =  predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff(Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
#Random Forest regression
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
#Fitting Random Forest Regression Model to dataset
library(randomForest)
#With brackets, give data frames, $ gives a vector (according to arguments)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
#Predicting a result with Random Forest Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
#Visualizing Random Forest reg (high resolution)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y =  predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff(Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
